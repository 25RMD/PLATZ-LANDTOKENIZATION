// Function to fetch collection details from the contract
const fetchCollectionDetails = async (collectionId: bigint) => {
  console.log(`üîÑ [fetchCollectionDetails] Fetching details for collection ${collectionId}`);
  try {
    const client = await createReliableClient();
    
    console.log(`üîÑ [fetchCollectionDetails] Reading collection data from NFT contract`);
    const collectionData = await client.readContract({
      address: PLATZ_LAND_NFT_ADDRESS as `0x${string}`,
      abi: PlatzLandNFTABI,
      functionName: 'getCollection',
      args: [collectionId]
    });

    if (!collectionData) {
      console.log(`‚ö†Ô∏è [fetchCollectionDetails] No data found for collection ${collectionId}`);
      return null;
    }
    
    console.log(`‚úÖ [fetchCollectionDetails] Collection data:`, collectionData);
    
    const [startTokenId, totalSupply, mainTokenId, baseURI, collectionURI, creator] = collectionData as [bigint, bigint, bigint, string, string, string];
    
    // Initialize marketplace data with default values
    let isListed = false;
    let price = undefined;
    let seller = undefined;

    try {
      console.log(`üîÑ [fetchCollectionDetails] Checking marketplace listing`);
      const marketplaceData = await client.readContract({
        address: LAND_MARKETPLACE_ADDRESS as `0x${string}`,
        abi: LandMarketplaceABI,
        functionName: 'getCollectionListing',
        args: [collectionId]
      });
      
      console.log(`‚úÖ [fetchCollectionDetails] Marketplace data:`, marketplaceData);
      
      // Only update marketplace data if the call was successful
      const [marketplaceSeller, marketplacePrice, , marketplaceIsActive] = marketplaceData as [string, bigint, string, boolean];
      isListed = marketplaceIsActive;
      price = marketplaceIsActive ? marketplacePrice : undefined;
      seller = marketplaceIsActive ? marketplaceSeller : undefined;
    } catch (marketplaceError) {
      console.log(`‚ÑπÔ∏è [fetchCollectionDetails] Collection ${collectionId} is not listed on marketplace:`, marketplaceError);
      // Continue with default values for marketplace data
    }
    
    return {
      collectionId,
      startTokenId,
      totalSupply,
      mainTokenId,
      baseURI,
      collectionURI,
      creator,
      isListed,
      price,
      seller
    };
  } catch (error) {
    console.error(`‚ùå [fetchCollectionDetails] Error fetching details for collection ${collectionId}:`, error);
    return null;
  }
};

const fetchCollectionsDirectly = async () => {
  console.log(`üîÑ [fetchCollectionsDirectly] Starting to fetch collections directly`);
  console.log(`üìù [fetchCollectionsDirectly] Using NFT contract address: ${PLATZ_LAND_NFT_ADDRESS}`);
  
  try {
    console.log(`üîÑ [fetchCollectionsDirectly] Getting reliable client`);
    const client = await createReliableClient();
    console.log(`‚úÖ [fetchCollectionsDirectly] Got reliable client`);

    // First try to verify if the contract exists
    console.log(`üîÑ [fetchCollectionsDirectly] Verifying contract code exists at address`);
    const code = await client.getBytecode({ address: PLATZ_LAND_NFT_ADDRESS as `0x${string}` });
    if (!code || code === '0x') {
      throw new Error('No contract code found at the specified address');
    }
    console.log(`‚úÖ [fetchCollectionsDirectly] Contract code verified`);

    console.log(`üîÑ [fetchCollectionsDirectly] Fetching collection count from contract: ${PLATZ_LAND_NFT_ADDRESS}`);
    try {
      const collectionCount = await client.readContract({
        address: PLATZ_LAND_NFT_ADDRESS as `0x${string}`,
        abi: PlatzLandNFTABI,
        functionName: 'getCollectionCount',
        args: []
      });

      console.log(`‚úÖ [fetchCollectionsDirectly] Total collections found: ${collectionCount}`);

      if (Number(collectionCount) === 0) {
        console.log(`‚ÑπÔ∏è [fetchCollectionsDirectly] No collections found`);
        return [];
      }

      // Get all collection IDs
      console.log(`üîÑ [fetchCollectionsDirectly] Fetching all collection IDs`);
      const collectionIds = await client.readContract({
        address: PLATZ_LAND_NFT_ADDRESS as `0x${string}`,
        abi: PlatzLandNFTABI,
        functionName: 'getAllCollectionIds',
        args: []
      });

      console.log(`‚úÖ [fetchCollectionsDirectly] Collection IDs:`, collectionIds);

      // Fetch details for each collection
      const collections = await Promise.all(
        (collectionIds as bigint[]).map(async (collectionId) => {
          console.log(`üîÑ [fetchCollectionsDirectly] Fetching details for collection ${collectionId}`);
          try {
            const collectionData = await client.readContract({
              address: PLATZ_LAND_NFT_ADDRESS as `0x${string}`,
              abi: PlatzLandNFTABI,
              functionName: 'getCollection',
              args: [collectionId]
            });

            console.log(`‚úÖ [fetchCollectionsDirectly] Collection ${collectionId} data:`, collectionData);
            const [startTokenId, totalSupply, mainTokenId, baseURI, collectionURI, creator] = collectionData as [bigint, bigint, bigint, string, string, string];

            return {
              id: collectionId.toString(),
              startTokenId: startTokenId.toString(),
              totalSupply: Number(totalSupply),
              mainTokenId: mainTokenId.toString(),
              baseURI,
              collectionURI,
              creator
            };
          } catch (error) {
            console.error(`‚ùå [fetchCollectionsDirectly] Error fetching collection ${collectionId}:`, {
              message: error.message,
              code: (error as any).code,
              data: (error as any).data,
              stack: (error as any).stack
            });
            return null;
          }
        })
      );

      const validCollections = collections.filter(c => c !== null);
      console.log(`‚úÖ [fetchCollectionsDirectly] Successfully fetched ${validCollections.length} collections`);
      return validCollections;
    } catch (error) {
      console.error(`‚ùå [fetchCollectionsDirectly] Error reading contract:`, {
        message: error.message,
        code: (error as any).code,
        data: (error as any).data,
        stack: (error as any).stack
      });
      throw error;
    }
  } catch (error) {
    console.error(`‚ùå [fetchCollectionsDirectly] Error:`, {
      message: error.message,
      code: (error as any).code,
      data: (error as any).data,
      stack: (error as any).stack
    });
    throw error;
  }
}; 