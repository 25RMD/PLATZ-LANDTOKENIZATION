generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model collection_price_history {
  id                String        @id
  land_listing_id   String
  price_type        String        @db.VarChar(20)
  price             Float
  previous_price    Float?
  change_percentage Float?
  bid_id            String?
  transaction_id    String?
  metadata          Json?
  created_at        DateTime      @default(now())
  land_listings     land_listings @relation(fields: [land_listing_id], references: [id], onDelete: Cascade)

  @@index([created_at])
  @@index([land_listing_id])
  @@index([price_type])
}

model evm_collection_tokens {
  id                    String        @id
  land_listing_id       String
  nft_id                String?
  token_id              Int
  is_main_token         Boolean       @default(false)
  token_uri             String
  owner_address         String?
  mint_transaction_hash String?
  mint_timestamp        DateTime?
  mint_status           String        @default("NOT_STARTED")
  is_listed             Boolean       @default(false)
  listing_price         Float?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime
  land_listings         land_listings @relation(fields: [land_listing_id], references: [id], onDelete: Cascade)
  nfts                  nfts?         @relation(fields: [nft_id], references: [id])

  @@index([is_listed])
  @@index([is_main_token])
  @@index([land_listing_id])
  @@index([mint_status])
  @@index([nft_id])
  @@index([owner_address])
  @@index([token_id])
}

model kyc_update_requests {
  id         String   @id
  userId     String
  status     String   @default("PENDING")
  changes    Json
  adminNotes String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  users      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([userId])
}

model land_listings {
  id                           String                     @id
  userId                       String
  title_deed_file_ref          String?
  deedNumber                   String?
  deedType                     String?
  grantorName                  String?
  granteeName                  String?
  deedDate                     DateTime?                  @db.Date
  title_cert_file_ref          String?
  certNumber                   String?
  cert_issue_date              DateTime?                  @db.Date
  legal_description            String?
  parcel_number                String?
  property_address             String?
  city                         String?
  state                        String?
  zip_code                     String?
  country                      String?
  latitude                     Float?
  longitude                    Float?
  property_type                String?
  property_area_sqm            Float?
  property_description         String?
  listing_title                String?
  listing_price                Float?
  price_currency               String?
  created_at                   DateTime                   @default(now())
  updated_at                   DateTime                   @updatedAt
  mint_status                  String?
  mint_error_reason            String?
  mint_timestamp               DateTime?
  mint_transaction_hash        String?
  token_id                     Int?
  contract_address             String?
  collection_id                String?                    @unique
  main_token_id                String?
  slug                         String?                    @unique
  cover_image_url              String?
  nft_description              String?
  nft_title                    String?
  nft_image_file_ref           String?
  nft_collection_size          Int?                       @default(10)
  marketplace_listing_id       Int?
  marketplace_listing_error    String?
  nft_image_irys_uri           String?
  nft_metadata_irys_uri        String?
  local_government_area        String?
  property_valuation           String?
  zoning_classification        String?
  child_tokens_base_url        String?
  collection_metadata_url      String?
  collection_nft_title         String?
  main_token_metadata_url      String?
  marketplace_transaction_hash String?
  creator_address              String?
  rejection_reason             String?
  status                       ListingStatus              @default(DRAFT)
  collection_price_history     collection_price_history[]
  evm_collection_tokens        evm_collection_tokens[]
  users                        users                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  nft_bids                     nft_bids[]
  nft_transactions             nft_transactions[]
  nfts                         nfts[]
  watchlist                    watchlist[]

  @@index([mint_status])
  @@index([status])
  @@index([userId])
}

model nft_bids {
  id               String        @id
  land_listing_id  String
  bidder_user_id   String
  bid_amount       Float
  bid_status       String        @db.VarChar(20)
  transaction_hash String?       @db.VarChar(66)
  created_at       DateTime      @default(now())
  updated_at       DateTime
  token_id         Int           @default(0)
  users            users         @relation(fields: [bidder_user_id], references: [id])
  land_listings    land_listings @relation(fields: [land_listing_id], references: [id])

  @@index([bid_status])
  @@index([bidder_user_id])
  @@index([land_listing_id])
  @@index([token_id])
}

model nft_transactions {
  id               String        @id
  land_listing_id  String
  token_id         Int
  from_address     String        @db.VarChar(42)
  to_address       String        @db.VarChar(42)
  price            Float
  transaction_hash String        @db.VarChar(66)
  transaction_type String        @db.VarChar(20)
  created_at       DateTime      @default(now())
  land_listings    land_listings @relation(fields: [land_listing_id], references: [id])
}

model nfts {
  id                    String                  @id
  name                  String
  itemNumber            Int
  image                 String
  price                 Float
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  propertyId            String?
  ownerId               String?
  isListed              Boolean                 @default(false)
  land_listing_id       String?
  evm_collection_tokens evm_collection_tokens[]
  land_listings         land_listings?          @relation(fields: [land_listing_id], references: [id], onDelete: Cascade)
  users                 users?                  @relation(fields: [ownerId], references: [id])
  properties            properties?             @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  offers                offers[]
  trades                trades[]

  @@unique([propertyId, itemNumber])
  @@index([isListed])
  @@index([ownerId])
  @@index([propertyId])
}

model offers {
  id                            String    @id
  nftId                         String
  offererId                     String
  price                         Float
  status                        String    @default("ACTIVE")
  expiresAt                     DateTime?
  createdAt                     DateTime  @default(now())
  updatedAt                     DateTime
  userId                        String?
  nfts                          nfts      @relation(fields: [nftId], references: [id], onDelete: Cascade)
  users_offers_offererIdTousers users     @relation("offers_offererIdTousers", fields: [offererId], references: [id], onDelete: Cascade)
  users_offers_userIdTousers    users?    @relation("offers_userIdTousers", fields: [userId], references: [id])

  @@index([nftId])
  @@index([offererId])
  @@index([status])
}

model properties {
  id          String   @id
  name        String
  items       Int
  volume      Float    @default(0)
  floor_price  Float
  image       String
  category    String
  verified    Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  user_id      String
  description String?
  nfts        nfts[]
  users       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model trades {
  id                            String   @id
  nftId                         String
  buyerId                       String
  sellerId                      String
  price                         Float
  timestamp                     DateTime @default(now())
  creatorId                     String?
  users_trades_buyerIdTousers   users    @relation("trades_buyerIdTousers", fields: [buyerId], references: [id], onDelete: Cascade)
  users_trades_creatorIdTousers users?   @relation("trades_creatorIdTousers", fields: [creatorId], references: [id])
  nfts                          nfts     @relation(fields: [nftId], references: [id], onDelete: Cascade)
  users_trades_sellerIdTousers  users    @relation("trades_sellerIdTousers", fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([buyerId])
  @@index([creatorId])
  @@index([nftId])
  @@index([sellerId])
  @@index([timestamp])
}

model users {
  id                             String                @id
  username                       String?               @unique @db.VarChar(50)
  email                          String?               @unique @db.VarChar(255)
  password_hash                  String?               @db.VarChar(255)
  full_name                      String?               @db.VarChar(100)
  address_line1                  String?               @db.VarChar(255)
  address_line2                  String?               @db.VarChar(255)
  city                           String?               @db.VarChar(100)
  state_province                 String?               @db.VarChar(100)
  postal_code                    String?               @db.VarChar(20)
  country                        String?               @db.VarChar(100)
  created_at                     DateTime              @default(now())
  updated_at                     DateTime              @updatedAt
  sign_in_nonce                  String?               @db.VarChar(255)
  evm_address                    String?               @unique @db.VarChar(42)
  date_of_birth                  DateTime?             @db.Date
  gov_id_ref                     String?
  gov_id_type                    String?               @db.VarChar(50)
  kyc_verified                   Boolean               @default(false)
  phone                          String?               @db.VarChar(20)
  auth_type                      String                @default("email") @db.VarChar(20)
  is_admin                       Boolean               @default(false)
  wallet_address                 String?               @unique @db.VarChar(42)
  Account                        Account[]
  Session                        Session[]
  kyc_update_requests            kyc_update_requests[]
  land_listings                  land_listings[]
  nft_bids                       nft_bids[]
  nfts                           nfts[]
  offers_offers_offererIdTousers offers[]              @relation("offers_offererIdTousers")
  offers_offers_userIdTousers    offers[]              @relation("offers_userIdTousers")
  properties                     properties[]
  trades_trades_buyerIdTousers   trades[]              @relation("trades_buyerIdTousers")
  trades_trades_creatorIdTousers trades[]              @relation("trades_creatorIdTousers")
  trades_trades_sellerIdTousers  trades[]              @relation("trades_sellerIdTousers")
  watchlist                      watchlist[]

  @@index([evm_address], map: "idx_users_evm_address")
  @@index([email])
  @@index([username])
}

model watchlist {
  id            String        @id
  userId        String
  collectionId  String
  createdAt     DateTime      @default(now())
  land_listings land_listings @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  users         users         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, collectionId])
  @@index([collectionId])
  @@index([userId])
}

enum ListingStatus {
  DRAFT    @map("draft")
  ACTIVE   @map("active")
  INACTIVE @map("inactive")
  PENDING  @map("pending")
  APPROVED @map("approved")
  REJECTED @map("rejected")
}
